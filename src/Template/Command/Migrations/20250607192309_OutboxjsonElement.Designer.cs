// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Template.Command.Database;

#nullable disable

namespace Template.Command.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250607192309_OutboxjsonElement")]
    partial class OutboxjsonElement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Template.Domain.ClientAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Latituded")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("numeric");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.AddressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdDelivery")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AddressHistorys", (string)null);
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.MedicalIllnesses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFound")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MedicalIllnessess", (string)null);
                });

            modelBuilder.Entity("Template.Domain.MedicalConsultationAggregate.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdConsultExternal")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Consultations", (string)null);
                });

            modelBuilder.Entity("Template.Domain.MedicalConsultationAggregate.HistoryConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.ToTable("HistoryConsultations", (string)null);
                });

            modelBuilder.Entity("Template.Domain.OutboxAggregate.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonElement>("Body")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Sent")
                        .HasColumnType("boolean");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampSend")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessage", (string)null);
                });

            modelBuilder.Entity("Template.Domain.RequestChangeAggregate.RequestChangeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AppointmentGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PreviusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RequestChangeHistorys", (string)null);
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.Address", b =>
                {
                    b.HasOne("Template.Domain.ClientAggregate.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.AddressHistory", b =>
                {
                    b.HasOne("Template.Domain.ClientAggregate.Address", null)
                        .WithMany("History")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.MedicalIllnesses", b =>
                {
                    b.HasOne("Template.Domain.ClientAggregate.Client", null)
                        .WithMany("MedicalIllnessess")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Template.Domain.MedicalConsultationAggregate.HistoryConsultation", b =>
                {
                    b.HasOne("Template.Domain.MedicalConsultationAggregate.Consultation", null)
                        .WithMany("HistoryConsultations")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.Address", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("Template.Domain.ClientAggregate.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("MedicalIllnessess");
                });

            modelBuilder.Entity("Template.Domain.MedicalConsultationAggregate.Consultation", b =>
                {
                    b.Navigation("HistoryConsultations");
                });
#pragma warning restore 612, 618
        }
    }
}
